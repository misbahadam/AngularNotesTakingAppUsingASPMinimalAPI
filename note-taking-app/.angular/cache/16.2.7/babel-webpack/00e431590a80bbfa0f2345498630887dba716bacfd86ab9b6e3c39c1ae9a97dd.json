{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { InjectionToken, EventEmitter, Optional, Inject, Injectable, NgModule } from '@angular/core';\nimport { ReplaySubject, timer, throwError, interval } from 'rxjs';\nimport { switchMap, takeUntil, filter, first, tap } from 'rxjs/operators';\nconst GA_TOKEN = new InjectionToken('angular-ga TrackingId');\nconst GA_OPTIONS = new InjectionToken('angular-ga Tracking Options');\nlet GoogleAnalyticsService = class GoogleAnalyticsService {\n  constructor(trackingId, options) {\n    this.event = new EventEmitter();\n    this.pageview = new EventEmitter();\n    this.queue = new ReplaySubject();\n    if (trackingId) {\n      this.configure(trackingId, options);\n    }\n  }\n  configure(trackingId, options = 'auto') {\n    this.ga('create', trackingId, options);\n    this.ga('send', 'pageview');\n    this.event.subscribe(x => {\n      this.onEvent(x);\n    });\n    this.pageview.subscribe(x => {\n      this.onPageView(x);\n    });\n    const timer$ = timer(20000).pipe(switchMap(() => throwError(new Error('Could not load GA'))));\n    interval(50).pipe(takeUntil(timer$), filter(() => Boolean(window.ga)), first(), switchMap(() => this.queue), tap(args => {\n      window.ga(...args); // tslint:disable-line:no-unsafe-any\n    })).subscribe();\n  }\n  set(key, value) {\n    if (typeof key !== 'string' && typeof key !== 'object') {\n      throw new TypeError(`Expected \\`fieldName\\` to be of type \\`string\\` or \\`object\\`, got \\`${typeof key}\\``);\n    }\n    if (typeof key === 'string' && value === undefined) {\n      throw new TypeError('Expected `fieldValue` to not be `undefined`');\n    }\n    if (typeof key === 'object') {\n      this.ga('set', key);\n    } else {\n      this.ga('set', key, value);\n    }\n  }\n  onEvent(event) {\n    this.ga('send', 'event', event.category, event.action, event.label, event.value);\n  }\n  onPageView(pageview) {\n    const fieldsObject = {};\n    if (pageview.title) {\n      fieldsObject.title = pageview.title;\n    }\n    this.ga('send', 'pageview', pageview.page, fieldsObject);\n  }\n  ga(...args) {\n    this.queue.next(args);\n  }\n};\nGoogleAnalyticsService.ctorParameters = () => [{\n  type: String,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [GA_TOKEN]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [GA_OPTIONS]\n  }]\n}];\nGoogleAnalyticsService = __decorate([Injectable(), __param(0, Optional()), __param(0, Inject(GA_TOKEN)), __param(1, Optional()), __param(1, Inject(GA_OPTIONS))], GoogleAnalyticsService);\nvar GoogleAnalyticsModule_1;\nlet GoogleAnalyticsModule = GoogleAnalyticsModule_1 = class GoogleAnalyticsModule {\n  static forRoot() {\n    return {\n      ngModule: GoogleAnalyticsModule_1,\n      providers: [GoogleAnalyticsService]\n    };\n  }\n};\nGoogleAnalyticsModule = GoogleAnalyticsModule_1 = __decorate([NgModule({\n  imports: [],\n  declarations: [],\n  exports: []\n})], GoogleAnalyticsModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GA_OPTIONS, GA_TOKEN, GoogleAnalyticsModule, GoogleAnalyticsService };","map":{"version":3,"names":["__decorate","__param","InjectionToken","EventEmitter","Optional","Inject","Injectable","NgModule","ReplaySubject","timer","throwError","interval","switchMap","takeUntil","filter","first","tap","GA_TOKEN","GA_OPTIONS","GoogleAnalyticsService","constructor","trackingId","options","event","pageview","queue","configure","ga","subscribe","x","onEvent","onPageView","timer$","pipe","Error","Boolean","window","args","set","key","value","TypeError","undefined","category","action","label","fieldsObject","title","page","next","ctorParameters","type","String","decorators","GoogleAnalyticsModule_1","GoogleAnalyticsModule","forRoot","ngModule","providers","imports","declarations","exports"],"sources":["D:/coding task/note-taking-app/node_modules/angular-ga/fesm2015/angular-ga.js"],"sourcesContent":["import { __decorate, __param } from 'tslib';\nimport { InjectionToken, EventEmitter, Optional, Inject, Injectable, NgModule } from '@angular/core';\nimport { ReplaySubject, timer, throwError, interval } from 'rxjs';\nimport { switchMap, takeUntil, filter, first, tap } from 'rxjs/operators';\n\nconst GA_TOKEN = new InjectionToken('angular-ga TrackingId');\nconst GA_OPTIONS = new InjectionToken('angular-ga Tracking Options');\n\nlet GoogleAnalyticsService = class GoogleAnalyticsService {\n    constructor(trackingId, options) {\n        this.event = new EventEmitter();\n        this.pageview = new EventEmitter();\n        this.queue = new ReplaySubject();\n        if (trackingId) {\n            this.configure(trackingId, options);\n        }\n    }\n    configure(trackingId, options = 'auto') {\n        this.ga('create', trackingId, options);\n        this.ga('send', 'pageview');\n        this.event.subscribe((x) => {\n            this.onEvent(x);\n        });\n        this.pageview.subscribe((x) => {\n            this.onPageView(x);\n        });\n        const timer$ = timer(20000)\n            .pipe(switchMap(() => throwError(new Error('Could not load GA'))));\n        interval(50)\n            .pipe(takeUntil(timer$), filter(() => Boolean(window.ga)), first(), switchMap(() => this.queue), tap(args => {\n            window.ga(...args); // tslint:disable-line:no-unsafe-any\n        }))\n            .subscribe();\n    }\n    set(key, value) {\n        if (typeof key !== 'string' && typeof key !== 'object') {\n            throw new TypeError(`Expected \\`fieldName\\` to be of type \\`string\\` or \\`object\\`, got \\`${typeof key}\\``);\n        }\n        if (typeof key === 'string' && value === undefined) {\n            throw new TypeError('Expected `fieldValue` to not be `undefined`');\n        }\n        if (typeof key === 'object') {\n            this.ga('set', key);\n        }\n        else {\n            this.ga('set', key, value);\n        }\n    }\n    onEvent(event) {\n        this.ga('send', 'event', event.category, event.action, event.label, event.value);\n    }\n    onPageView(pageview) {\n        const fieldsObject = {};\n        if (pageview.title) {\n            fieldsObject.title = pageview.title;\n        }\n        this.ga('send', 'pageview', pageview.page, fieldsObject);\n    }\n    ga(...args) {\n        this.queue.next(args);\n    }\n};\nGoogleAnalyticsService.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [GA_TOKEN,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GA_OPTIONS,] }] }\n];\nGoogleAnalyticsService = __decorate([\n    Injectable(),\n    __param(0, Optional()), __param(0, Inject(GA_TOKEN)),\n    __param(1, Optional()), __param(1, Inject(GA_OPTIONS))\n], GoogleAnalyticsService);\n\nvar GoogleAnalyticsModule_1;\nlet GoogleAnalyticsModule = GoogleAnalyticsModule_1 = class GoogleAnalyticsModule {\n    static forRoot() {\n        return {\n            ngModule: GoogleAnalyticsModule_1,\n            providers: [\n                GoogleAnalyticsService\n            ]\n        };\n    }\n};\nGoogleAnalyticsModule = GoogleAnalyticsModule_1 = __decorate([\n    NgModule({\n        imports: [],\n        declarations: [],\n        exports: []\n    })\n], GoogleAnalyticsModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GA_OPTIONS, GA_TOKEN, GoogleAnalyticsModule, GoogleAnalyticsService };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}