{"ast":null,"code":"import API_ENDPOINTS from 'src/app/constants/APIEndpoints';\nimport HTTP_OPTIONS from 'src/app/constants/HttpOptions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i4 from \"../services/note.service\";\nimport * as i5 from \"@angular/common\";\nfunction NoteEditComponent_p_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 19);\n    i0.ɵɵtext(1, \"Note updated!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NoteEditComponent_p_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 20);\n    i0.ɵɵtext(1, \"Failed to update the note. Check the console for details.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NoteEditComponent_button_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 21);\n    i0.ɵɵtext(1, \"Update\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let NoteEditComponent = /*#__PURE__*/(() => {\n  class NoteEditComponent {\n    constructor(fb, httpClient, activeModal, noteService) {\n      this.fb = fb;\n      this.httpClient = httpClient;\n      this.activeModal = activeModal;\n      this.noteService = noteService;\n      this.updateSuccessful = false;\n      this.updateFailed = false;\n    }\n    ngOnInit() {\n      this.form = this.fb.group({\n        id: [this.noteToUpdate.id],\n        title: [this.noteToUpdate.title],\n        body: [this.noteToUpdate.body],\n        createdDate: [this.noteToUpdate.createdDate]\n      });\n      this.form.controls['id'].disable();\n    }\n    submitForm() {\n      var noteToUpdateDTO = {};\n      noteToUpdateDTO.title = this.form.get('title').value;\n      noteToUpdateDTO.body = this.form.get('body').value;\n      this.httpClient.put(`${API_ENDPOINTS.UPDATE_NOTE}/${this.noteToUpdate.id}`, noteToUpdateDTO, HTTP_OPTIONS).subscribe({\n        next: response => {\n          this.updateSuccessful = true;\n          let updatedNoteFromServer = response;\n          let updatedNoteIndex = this.noteService.allNotes.findIndex(note => note.id == updatedNoteFromServer.id);\n          this.noteService.allNotes[updatedNoteIndex].title = updatedNoteFromServer.title;\n          this.noteService.allNotes[updatedNoteIndex].body = updatedNoteFromServer.body;\n          this.noteService.allNotes[updatedNoteIndex].createdDate = updatedNoteFromServer.createdDate;\n          console.log('Successfully updated the note! Response from server:');\n          console.log(response);\n        },\n        error: error => {\n          this.updateFailed = true;\n          console.log(`Failed to update the note! Response from server: \"HTTP statuscode: ${error.status}: ${error.error}\"`);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function NoteEditComponent_Factory(t) {\n      return new (t || NoteEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.NgbActiveModal), i0.ɵɵdirectiveInject(i4.NoteService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NoteEditComponent,\n      selectors: [[\"app-note-edit\"]],\n      decls: 25,\n      vars: 5,\n      consts: [[1, \"modal-header\"], [1, \"modal-title\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"btn-close\", 3, \"click\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"modal-body\"], [1, \"container\"], [1, \"form-group\"], [\"for\", \"idInput\"], [\"type\", \"text\", \"id\", \"idInput\", \"formControlName\", \"id\", \"readonly\", \"\", 1, \"form-control\"], [\"for\", \"titleInput\"], [\"id\", \"titleInput\", \"placeholder\", \"Note Title\", \"formControlName\", \"title\", 1, \"form-control\"], [1, \"form-group\", \"mt-4\"], [\"for\", \"contentInput\"], [\"id\", \"contentInput\", \"placeholder\", \"Note Body\", \"formControlName\", \"body\", \"rows\", \"8\", 1, \"form-control\"], [1, \"modal-footer\"], [\"class\", \"text-success\", 4, \"ngIf\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"class\", \"btn btn-lg btn-dark\", \"type\", \"submit\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-lg\", \"btn-outline-dark\", 3, \"click\"], [1, \"text-success\"], [1, \"text-danger\"], [\"type\", \"submit\", 1, \"btn\", \"btn-lg\", \"btn-dark\"]],\n      template: function NoteEditComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n          i0.ɵɵtext(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"button\", 2);\n          i0.ɵɵlistener(\"click\", function NoteEditComponent_Template_button_click_3_listener() {\n            return ctx.activeModal.dismiss(\"Cross click\");\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"form\", 3);\n          i0.ɵɵlistener(\"ngSubmit\", function NoteEditComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.submitForm();\n          });\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5)(7, \"div\", 6)(8, \"label\", 7);\n          i0.ɵɵtext(9, \"Note ID\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 6)(12, \"label\", 9);\n          i0.ɵɵtext(13, \"Note Title\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"div\", 11)(16, \"label\", 12);\n          i0.ɵɵtext(17, \"Note Body\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"textarea\", 13);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(19, \"div\", 14);\n          i0.ɵɵtemplate(20, NoteEditComponent_p_20_Template, 2, 0, \"p\", 15);\n          i0.ɵɵtemplate(21, NoteEditComponent_p_21_Template, 2, 0, \"p\", 16);\n          i0.ɵɵtemplate(22, NoteEditComponent_button_22_Template, 2, 0, \"button\", 17);\n          i0.ɵɵelementStart(23, \"button\", 18);\n          i0.ɵɵlistener(\"click\", function NoteEditComponent_Template_button_click_23_listener() {\n            return ctx.activeModal.close(\"Close click\");\n          });\n          i0.ɵɵtext(24, \"Close\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\"Update Note titled \\\"\", ctx.noteToUpdate.title, \"\\\"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(16);\n          i0.ɵɵproperty(\"ngIf\", ctx.updateSuccessful);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.updateFailed);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.updateSuccessful === false);\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\".container[_ngcontent-%COMP%]{margin:20px;padding:20px;border:1px solid #ccc;border-radius:5px;box-shadow:0 2px 5px #0003;background-color:#fff}.form-group[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{font-weight:700}.form-control[_ngcontent-%COMP%]{width:100%;padding:8px;border:1px solid #ccc;border-radius:3px}textarea.form-control[_ngcontent-%COMP%]{resize:vertical}.btn-primary[_ngcontent-%COMP%]{background-color:#007bff;color:#fff;border:none;border-radius:3px;padding:8px 16px;cursor:pointer}.btn-primary[_ngcontent-%COMP%]:hover{background-color:#0056b3}\"]\n    });\n  }\n  return NoteEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}